* Git utilities by Hraban Luyat

Lisp utilities.

- [[#git-graft][git graft]]: cut & paste an entire subtree of git branches
- [[#git-pullfetch][git pullfetch]]: git fetch and pull combo

* Commands

** git graft: cut & paste an entire subtree of git branches
:PROPERTIES:
:CUSTOM_ID: git-graft
:END:

*Typical use case:* you have a long list of PRs which depend on each other; when origin/master is updated, you want to rebase all of them to the new origin/master. Instead of rebasing each branch individually, you want to “snip” the bottom off the old master, and “glue” it back onto the new one.

*** Usage

#+begin_src shell :eval never
git graft ROOT ONTO
#+end_src

- =ROOT= :: the first commit under (and including) which all local branches will be selected.
- =ONTO= :: the commit onto which the subtree will be moved.

This git-graft won’t actually run the commands: it just prints them to stdout. You’re meant to manually copy & paste them to your shell. This is a temporary hack to allow a human to sanity check the results, and it provides rollback.

**** Advanced

Once you get comfortable with the tool, you can pipe directly to bash:

#+begin_src shell :eval never
git graft ROOT ONTO | bash
#+end_src

This will print undo commands, so in case of trouble you can always rollback.

*** Example

say after a git fetch, you end up with:

#+begin_example
  A -> B -> master -> C -> D -> origin/master
              \
                --> E -> branch1 -> F -> branch2
                           \
                             -----> G -> branch3
#+end_example

Execute this:

#+begin_src shell :eval never
  git-graft E origin/master
#+end_src

And you will get a bunch of git commands on stdout. Execute them all, and you should end up with:

#+begin_example
  ... -> D -> origin/master -> E -> branch1 -> F -> branch2
                                      \
                                        -----> G -> branch3
#+end_example

Every local branch under (and including) branch1 will be moved, so be careful choosing something like (e.g.) master. It will work if all branches under master are indeed feature branches that you “own”, but if you locally checked out someone else's branch, it will also be rebased.

Git-graft also prints “undo” commands, commented out. These are not expected to be necessary for normal operation, but if something goes wrong midway through a big graft, you can use those commands to go back to the pre-graft state.

The argument to git-graft, the root, is *inclusive*. This is at odds with git conventions, where you normally specify a commit's “parent”, under which all relevant commits are found. The reason is that sometimes, e.g. the example above, choosing the parent can lead to too many branches being included: you'd get origin/master, and all potential other local branches already ported onto it.

** git pullfetch: git fetch and git pull combo
:PROPERTIES:
:CUSTOM_ID: git-pullfetch
:END:

When cooperating with others on a busy repo this command helps “pull all changes.” Update master if it’s been updated, purge deleted branches, etc.

Usage:

#+begin_src shell :eval never
git pullfetch
#+end_src

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
** Docker
:PROPERTIES:
:CUSTOM_ID: docker
:END:

#+begin_src shell :eval never
docker run --rm -v "$PWD":/data luyat/git-tools git-graft ... | bash
#+end_src

Pros:

- No installation required.

Cons:

- Slow and annoying, especially on Mac and Windows.
- Doesn’t integrate with the =git= tool, so you can’t do e.g. =git graft ...=, unless you install a trampoline script.

** Nix

This is your best option, if you have Nix installed:

#+begin_src shell
nix-build
#+end_src

The binary and symlinks are available in the =result= directory.

I don’t know enough Nix to tell you the proper way to install this system wide. This works though:

#+begin_src shell
printf 'export PATH="$PATH:%s/result/"\n' "$PWD" >> ~/.bashrc
#+end_src

🤷‍♀️

** Native

If you have the stomach for it, this yields much better results. Instructions for Mac, but it should be fairly similar on Linux and Windows.

1. Install [[https://www.sbcl.org/][SBCL]]:

   =$ brew install sbcl=
2. Install [[https://www.quicklisp.org/][Quicklisp]] (follow the full instructions, up to and including =(ql:add-to-init-file)=)
3. From this directory:

  #+begin_src shell :eval never-export
  mkdir -p ~/quicklisp/local-projects
  ln -fs "$PWD/src/" ~/quicklisp/local-projects/hly-git-tools
  ./ql-install-deps.lisp
  ./build.lisp
  printf 'export PATH="$PATH:%s/dist/"\n' "$PWD" >> ~/.bashrc
  source ~/.bashrc
  #+end_src

You now have a binary =hly-git-tools= in the =./dist/= directory which you can
move wherever you want and run, even without Lisp installed.

To recompile the source later, you only need to run =./build.lisp=.

After adding the tool to your path, you can invoke commands as sub commands of the binary, e.g.:

#+begin_src shell :eval never
hly-git-tools git-graft foo bar
#+end_src

But you can also directly call them as git subcommands:

#+begin_src shell :eval never
git graft foo bar
#+end_src

This uses the git convention that any executable called =git-something= on your path will be picked up by the top-level =git= tool and exposed as =git something=.

* License

hly-git-tools - Git utilities
Copyright © 2022  Hraban Luyat

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, version 3 of the License.


This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

